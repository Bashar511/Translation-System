Cinema management



class MovieListSerializer(MovieSerializer):
    genres = serializers.SlugRelatedField(
        many=True, read_only=True, slug_field="name"
    )
    actors = serializers.SlugRelatedField(
        many=True, read_only=True, slug_field="full_name"
    )

    class Meta:
        model = Movie
        fields = ("id", "title", "genres", "actors", "image")


//////////////////////////////////


class GenreViewSet(
    mixins.CreateModelMixin,
    mixins.ListModelMixin,
    GenericViewSet,
):
    queryset = Genre.objects.all()
    serializer_class = GenreSerializer
 
  permission_classes = (IsAdminOrIfAuthenticatedReadOnly,)








//////////////////////////////////
from django.contrib.auth.models import (
    AbstractUser,
    BaseUserManager,
)
from django.db import models
from django.utils.translation import gettext as _


class UserManager(BaseUserManager):
    """Define a model manager for User model with no username field."""

    use_in_migrations = True

    def _create_user(self, email, password, **extra_fields):
        """Create and save a User with the given email and password."""
        if not email:
            raise ValueError("The given email must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_user(self, email, password=None, **extra_fields):
        """Create and save a regular User with the given email and password."""
        extra_fields.setdefault("is_staff", False)
        extra_fields.setdefault("is_superuser", False)
        return self._create_user(email, password, **extra_fields)

    def create_superuser(self, email, password, **extra_fields):
        """Create and save a SuperUser with the given email and password."""
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)

        if extra_fields.get("is_staff") is not True:
            raise ValueError("Superuser must have is_staff=True.")
        if extra_fields.get("is_superuser") is not True:
            raise ValueError("Superuser must have is_superuser=True.")

        return self._create_user(email, password, **extra_fields)


class User(AbstractUser):
    username = None
    email = models.EmailField(_("email address"), unique=True)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = []

    objects = UserManager()

//////////////////////////////////////////////////////////

 def save(self, force_insert=False, force_update=False, using=None,
             update_fields=None):
        self.end_date = self.start_date + datetime.timedelta(
            seconds=self.movie_id.duration.seconds) + datetime.timedelta(
            seconds=self.show_break.seconds)
        super(Showtime, self).save()


///////////////////////////////////////////////////////////////



class TicketType(models.Model):
    ticket_id = models.AutoField(primary_key=True, null=False)
    type = models.CharField(max_length=40)
    price = models.DecimalField(max_digits=10, decimal_places=2, null=False)
    conditions = models.TextField(null=False)
    deleted = models.BooleanField(default=False)

    def get_absolute_url(self):
        return reverse('tickettype-details-worker', kwargs={'pk': self.ticket_id})

    def __str__(self):
        return self.type

///////////////////////////////////////////////////////////////

class Reservation(models.Model):
    reservation_id = models.AutoField(primary_key=True, null=False)
    client_id = models.ForeignKey(Client, on_delete=models.CASCADE)
    showtime_id = models.ForeignKey(Showtime, on_delete=models.CASCADE)
    cost = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    paid = models.BooleanField(default=False)
    ticket_id = models.ManyToManyField(Ticket)
    reservation_date = models.DateTimeField(null=False, editable=False)
    reservation_expire = models.DateTimeField(null=False, editable=False)
    confirmed = models.BooleanField(default=False)
    # https://stackoverflow.com/questions/16925129/generate-unique-id-in-django-from-a-model-field
    reservation_confirmation_code = models.UUIDField(primary_key=False, default=uuid.uuid4, editable=False)
    confirmation_email = models.BooleanField(default=False)

    def get_absolute_url(self):
        return reverse('reservation-details-worker', kwargs={'pk': self.reservation_id})

    def save(self, force_insert=False, force_update=False, using=None,
             update_fields=None):
        self.reservation_date = timezone.now()
        self.reservation_expire = self.reservation_date + timezone.timedelta(minutes=30)  # rezerwacja wygasa po 30min
        return super(Reservation, self).save()

    def __str__(self):
        return str(self.reservation_id) + '. ' + str(self.client_id.first_name) + ' ' + str(
            self.client_id.last_name) + ' - ' + str(self.showtime_id.movie_id.title) + ' - ' \
               + str(self.showtime_id.start_date)

